package  {	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Bitmap;		import flash.events.Event;	import flash.display.Loader;		import flash.display.PixelSnapping;	import flash.net.URLRequest;		import flash.display.DisplayObject;	import flash.geom.Point;			import flash.display.BlendMode;	import flash.geom.Rectangle;		import flash.display.StageQuality;	import flash.display.Shape;	import flash.display.Sprite;	import flash.geom.Matrix;	import flash.filesystem.File;	import flash.errors.IOError;		public class FaceLayer extends MovieClip {		private var bmFace,bmMask:Bitmap;		private var rCenter:Point;		private var faceRect:Rectangle;		public var boundRect:Rectangle;		public var clipRect:Rectangle;		private var wrapper:MovieClip;		private var cropFace:Bitmap;		private var cropMask:Bitmap;		private var cropRects:Bitmap;		public var cropScale:Number;		private var rects:Shape;		private var rectFlag, faceFlag, maskFlag:Boolean = false;		private var imageExt = ".png";		var padding:Number = 40;		var debug:Boolean = false;		public var wide,high:Number;		private var _bin:String;				public function FaceLayer() {			// constructor code			wrapper = new MovieClip();		}				public function set bin(F:File):void{			_bin = F.url;		}		public function set rect(r:String){			var rect:Array = r.split(";");			var rPosition = str2pt( rect[0]);			var rSize = str2pt(rect[1]);			rCenter = str2pt(rect[2]);			faceRect = new Rectangle(rPosition.x,rPosition.y, rSize.x, rSize.y);			buildRectangles();					}						private function buildRectangles():void		{			boundRect = faceRect.clone();						with(boundRect){				x-=padding;				width += 2 * padding;								var dh:Number = Math.ceil(width*1.33);				var dy:Number = (dh - height) /2;				y -= dy;				height += 2 * dy;			}			rects = new Shape();			with (rects.graphics){				clear;				beginFill(0xFF0000, 0.25);				drawRect(faceRect.x, faceRect.y, faceRect.width, faceRect.height);								beginFill(0xFFdd00, 0.25);				drawRect(boundRect.x, boundRect.y, boundRect.width, boundRect.height);																}			cropScale = (boundRect.height < 768) ? 768/boundRect.height : boundRect.height/768;			clipRect = boundRect.clone();						clipRect.x*=cropScale;			clipRect.y*=cropScale;			clipRect.width*=cropScale;			clipRect.height*=cropScale;						cropRects = crop(rects);			rectFlag = true;					}				private function showFace():void{						if(debug)				{			wrapper.addChild(bmFace);			wrapper.addChild(rects);				}else{					wrapper.addChild(cropFace);					//cropRects.alpha = 0.2;					//cropMask.blendMode = BlendMode.MULTIPLY;					//wrapper.addChild(cropMask);					addChild(wrapper);					//wrapper.width=this.width;					//wrapper.height = this.height;			//addChild(rects);				}		}				private function str2pt(s:String):Point{			var arr:Array = s.split("x");			var ret:Point = new Point(arr[0],arr[1]);			return ret;		}				public function loadImage(loc:String){			var fce:String = _bin+"/"+loc+imageExt;			var msk:String = _bin+"/"+loc+"mask"+imageExt;			loadFace(fce);			loadMask(msk);		}				public function loadFace(loc:String):void{			var ldr:Loader = new Loader;			ldr.contentLoaderInfo.addEventListener(Event.COMPLETE,faceLoaded);			var url:URLRequest = new URLRequest(loc);			//addChild(ldr);			try{				ldr.load(url);			}catch(e:flash.errors.IOError){				trace("IO Error: "+e.errorID+"::" +e.name+" "+e.message);			}		}				public function loadMask(loc:String):void{			var ldr:Loader = new Loader;			ldr.contentLoaderInfo.addEventListener(Event.COMPLETE,maskLoaded);			var url:URLRequest = new URLRequest(loc);			//addChild(ldr);			ldr.load(url);		}				private function faceLoaded(e:Event){			trace("load complete");			bmFace = e.target.loader.content as Bitmap;			//addChild(bmFace);			cropFace = crop(bmFace);			faceFlag = true;			checkLoads();		}				private function maskLoaded(e:Event){			trace("load complete");			bmMask = e.target.loader.content as Bitmap;			cropMask = crop(bmMask);			maskFlag = true;			checkLoads();					}				private function checkLoads():void{			if ( faceFlag && maskFlag  && rectFlag ) showFace();		}						private function crop(target:DisplayObject):Bitmap{			//var scale:Number = (area.height < 768) ? 768/area.height : area.height/768;			var cropBmd = new BitmapData( wide, high );			//var cropBmd = new BitmapData( area.width*scale, area.height*scale );			var cropBm:Bitmap = new Bitmap(cropBmd, PixelSnapping.ALWAYS, true );			cropBm.bitmapData.draw(target, new Matrix(cropScale,0,0,cropScale,-clipRect.left,-clipRect.top),null,null,null,true);						//cropBm.bitmapData.draw(target, new Matrix(scale,0,0,scale,-area.left*scale,-area.top*scale),null,null,null,true);			return cropBm;		}	}	}