package  {		import flash.display.MovieClip;	import flash.display.Shape;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.display.BitmapData;	import flash.events.Event;	import FaceLayer;	import flash.display.Bitmap;	import flash.display.BlendMode;	import com.nocircleno.graffiti.GraffitiCanvas;	import com.nocircleno.graffiti.tools.BrushTool;	import com.nocircleno.graffiti.tools.BrushType;	import flash.utils.ByteArray;	import flash.display.PNGEncoderOptions;	import flash.filesystem.File;	import flash.filesystem.FileStream;	import flash.geom.Matrix;	import flash.display.Sprite;	import com.greensock.TweenLite;		public class mirrorCanvas extends MovieClip {		public var  currentImage:String;		private var _bin:String;		private var rPosition,rSize,rCenter:Point;		public var center:Point = new Point();		private var fL:FaceLayer; 		private var grafCanvas:GraffitiCanvas;		private var undo,finish:metaTool;				public function mirrorCanvas() {			// constructor code			this.addEventListener(Event.ADDED_TO_STAGE, init);			MirrorTexture.mouseEnabled = false;			Frame.mouseEnabled = false;			fL = new FaceLayer();					}				public function set toolBox(t:toolBox):void{			t.addEventListener(ToolEvent.TOOL_CHOSEN, changeTool);		}				public function set metaTools(m:metaTools):void{			m.addEventListener(ToolEvent.DONE, isDrawDone);			m.addEventListener(ToolEvent.UNDO, drawUndo);		}								public function set bin(b:File){			_bin=b.nativePath;			fL.bin = b;		}		public function set faceImage(loc:String){			fL.loadImage(loc);			TweenLite.to(MirrorTexture,1,{alpha:0});		}								public function set rect(r:String){			fL.rect = r;		}				private function init(e:Event):void{						center.x = this.width/2;			center.y = this.height/2;			fL.wide = this.width;			fL.high = this.height;			setupGraf();			//addChild(fL);						//trace(fL);		}				private function setupGraf(){						grafCanvas = new GraffitiCanvas(this.width, this.height, 15, null, null);			//grafCanvas.blendMode = BlendMode.NONE;			this.addChildAt(grafCanvas,1);			this.addChildAt(fL,1);			grafCanvas.blendMode = BlendMode.OVERLAY;			}				private function drawUndo(e:Event):void{			grafCanvas.prevHistory()		}				private function isDrawDone(e:Event):void		{			trace("draw done");			var clip:Rectangle = fL.boundRect;  //original clipping rectangle from tracker			var BMD:BitmapData = new BitmapData(clip.width,clip.height,true,0); //create bmd to hold clipped makeup					//invert the scale used to "blow up" the face originally,			//create a matrix for bm scaling			var scale:Number = 1/fL.cropScale;  			var m:Matrix = new Matrix(scale,0,0,scale,0,0);						//BMD.draw(this,m,null,null,null,true);			BMD.draw(grafCanvas.drawing(true),m,null,null,null,true);						var lg:Sprite = new Sprite();			lg.width = 720; 			lg.height = 1280;						var bm:Bitmap = new Bitmap(BMD);			lg.addChild(bm);			bm.x = clip.x;			bm.y = clip.y;			var lgBMD:BitmapData = new BitmapData(720,1280,true,0);			lgBMD.draw(lg);						var enc = new PNGEncoderOptions();			var bytes = new ByteArray;			lgBMD.encode(lgBMD.rect, enc, bytes);						var fs:FileStream = new FileStream();			var file = new File(_bin+"/facePaint.png");			//var file:File = File.applicationDirectory.resolvePath("face_pain.jpg");			fs.open(file,"write");			fs.writeBytes(bytes,0,bytes.length);			fs.close();			currentImage = file.nativePath;			dispatchEvent(new ClownEvent(ClownEvent.DRAW_DONE,false,false,file.nativePath));		}				public function reset():void{			grafCanvas.clearCanvas();			TweenLite.to(MirrorTexture,1,{alpha:1});		}				private function changeTool(t:ToolEvent):void{						grafCanvas.activeTool = t.data as BrushTool;			}					}	}